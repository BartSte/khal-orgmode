#!/usr/bin/env python
import logging
import sys
from typing import Any

import orgparse
from khal.cli import main_khal
from orgparse.node import OrgNode

# title: str = child.heading
# scheduled_start: datetime = child.scheduled.start
# scheduled_end: datetime = child.scheduled.end
# deadline_start: datetime = child.deadline.start
# deadline_end: datetime = child.deadline.end
# properties: dict = child.properties
# description: str = child.body
# description_rich = child.body_rich


def main(content: str):
    """

    Args:
        content (str): 
    """
    org: Any = parse_org_agenda_item(content)
    temp_argv: list = get_khal_argv()


def parse_org_agenda_item(content: str) -> Any:
    """

    Args:
        content (str): 

    Returns:
        
    """
    root: OrgNode = orgparse.loads(content)
    return root.children[0]


def get_khal_argv() -> list:
    return ['khal new', '--help']


if __name__ == '__main__':
    main(sys.stdin.read())

    """
    The `new` command of khal in not exposed as a function that can easily be called
    from a script. A simpler solution is to temporary change sys.argv so it contains
    the desired command line arguments.
    """
    logging.basicConfig(level=logging.DEBUG)

    def set_argv(executable, *args):
        sys.argv = [executable, *args]
        message: str = (
            "Python's sys.argv is temporary replaced by the following command line "
            f"arguments: {sys.argv}"
        )
        logging.debug(message)

    old_argv = sys.argv
    try:
        set_argv("khal new", "--help")
        main_khal.commands['new']()
    finally:
        sys.argv = old_argv
