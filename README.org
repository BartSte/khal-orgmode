#+TITLE:     README - khalorg
#+AUTHOR:    BartSte
#+DATE:      2023-01-11

* Introduction
  ~khalorg~ is a command line tool that converts agenda items of org mode
  into khal calendar items, and vice versa.  

  Warning: this program is still experimental, under development, and open for
  change. Before use, make sure you make a back-up of your calendar. Check the
  requirements for the features that are currently finished and under
  development. 

** Definitions
   - CalDav -> internet standard for client access to calendars [[https://en.wikipedia.org/wiki/CalDAV]]
   - Davmail -> CalDav exchange gateway [[https://davmail.sourceforge.net/e]]
   - emacs -> text editor [[https://www.gnu.org/software/emacs/]]
   - khal -> command line calendar app [[https://github.com/pimutils/khal]]
   - khalel -> interface between emacs and khal [[https://gitlab.com/hperrey/khalel]]
   - neovim -> text editor [[https://neovim.io/]]
   - nvim-orgmode -> org mode for neovim [[https://github.com/nvim-orgmode/orgmode]]
   - org -> plain text system for keeping notes, agendas and more. [[https://orgmode.org]]
   - vdirsyncer -> a command line tool for synchronizing calendars and 
     addressbooks between servers and the local file system. [[https://github.com/pimutils/vdirsyncer]]

** Motivation
   I use org mode to manage my agenda and my notes. However, in a professional
   setting, you are often required to use proprietary software for your agenda,
   like Office 365. Luckily, programs exist that can synchronize agendas from
   different sources, by implementing the CalDav standard. Personally, I like
   to use vdirsyncer for synchronization my agendas, and khal to access and
   manipulate the agena items. To bridge the gap between khal and org mode,
   only 1 program exists called: khalel. However, this program is designed for
   emacs. Since there are also org mode users outside of emacs (e.g. neovim),
   khalorg aims to be a general interface between khal and org mode.

   Based on the above, the following workflow is desired:
   # CalDav server -> vdirsyncer
   # vdirsyncer -> khal
   # khal -> khal-orgmode
   # khal-orgmode -> org mode
   #+begin_example
   ┌─────────────┐
   │CalDav server│
   └┬────────────┘
   ┌▽─────────┐   
   │vdirsyncer│   
   └┬─────────┘   
   ┌▽───┐         
   │khal│         
   └┬───┘         
   ┌▽───────┐
   │khalorg │
   └┬───────┘
   ┌▽───────┐     
   │org mode│     
   └────────┘     
   #+end_example

** Features
   - [X] Can be used by org mode for emacs, vim and neovim.
   - [X] Import vdirsyncer calendar into org.   
     It is possible to import calendar items from vdirsyncer into org. 
   - [X] List a new org agenda item to vdirsyncer.  
     Org's list functionality is used to export a single org item to a
     vdirsyncer calendar. A heading and a plain timestamp are required for
     this list.
   - [ ] Edit an existing calendar item in vdirsyncer from org.  
     Imported org agenda items can be edited and listed so that the
     vdirsyncer items are updated instead of duplicated.              
   - [X] Recurring items           
   - [-] Neovim plugin.
   - [-] Include an Office 365 workflow.
   - [ ] Include timezones
   - [ ] Is available on PyPI.

* Installation
  - For now, you need to clone this repository and run:
    #+begin_src bash
    pip install -r requirements.txt
    #+end_src
    Next, you can use the executable ~khalorg~ to import and list org agenda
    items. Make sure your khal date format is compatible with org, otherwise it
    will not work. When running ~khal printformats~ you should get:
    
    #+begin_src
    longdatetimeformat: 2013-12-21 Sat 21:45
    datetimeformat: 2013-12-21 Sat 21:45
    longdateformat: 2013-12-21 Sat
    dateformat: 2013-12-21 Sat
    timeformat: 21:45
    #+end_src

    Checkout section [[Usage]] for more info.

* Usage
** List: from khal to org
   Agenda items from khal can be converted to org items using the 
   ~khalorg list~ command. For examples:
   #+begin_src bash
   khalorg list my_calendar today 90d > my_calendar.org 
   #+end_src
   here, the khal agenda item of the calendar ~my_calendar~ are coverted to org
   mode format and written to a file called ~my_calendar.org~. The range is
   specified from ~today~ till ~90d~ (90 days) in the future. For more
   information about the allowed date formats, check the ~khal list~ command,
   which is used for this functionality. It is assumed that the khal calendar
   called "my_calendar" exists. Make sure "my_calendar" is a calendar that
   exists on your local file system.

   The khal ~--format~ is defined in ~./src/static/org_format.txt~. If you want
   to define your own format, you can create the follow file
   ~$HOME/.config/khalorg/org_format.txt~ and add your format there. This
   format will then be used instead of the default one.

** New: from org to khal
   An org agenda item can be converted to a new khal agenda item by feeding the
   org item through stdin to ~khalorg~ and specifying the khal calendar name as
   a positional argument. For example, the consider the org item below, which
   is saved as ~meeting.org~.
   #+begin_example
   * Meeting                                                            :LABEL:
   <2023-01-01 Sun 01:00-02:00 +1w>
   :PROPERTIES:
   :ID: 123
   :LOCATION: Somewhere
   :ORGANIZER: Someone (someone@outlook.com)
   :ATTENDEES: test@test.com, test2@test.com
   :URL: www.test.com
   :END:
   Hello,

   Lets have a meeting.

   Regards,


   Someone
   #+end_example
   This item can be converted to the khal calendar called "my_calendar" as follows:
   #+begin_src bash
   cat meeting.org | khalorg new my_calendar
   #+end_src
   It is assumed that the khal calendar called "my_calendar" exists. Make sure
   "my_calendar" is a calendar that exists on your local file system.

   Note that this meeting is repeated every week (~+1w~). Currently, the
   following repeats are supported: daily, weekly, monthly or yearly.
   Bi-weekly (~+2w~) or other derivatives are not supported yet. These
   events repeat forever, unless you specify an end date using the `--until`
   option. This option is passed on to khal so you can read about is in khal's
   documentation.

   Optional attendees can be added to the ~ATTENDEES~ property field. The 
   attendees will be added to the ~Attendees~ field of khal. Once you
   synchronize khal with a server (e.g., outlook) an invitation will be send to
   the attendees.

** Delete: 
   - In progress

** Neovim plugin
   Work in progress. The plugin works for the ~khalorg new~ command but some
   settings ars still hard-coded. The plugin is called [[https://github.com/BartSte/nvim-khalorg][nvim-khalorg]].

* Workflow for Office 365
  # Office 365 -> Davmail
  # Davmail -> vdirsyncer
  # vdirsyncer -> khal
  # khal -> khal-orgmode
  # khal-orgmode -> org mode
  #+begin_example
  ┌──────────┐  
  │Office 365│  
  └┬─────────┘  
  ┌▽──────┐     
  │Davmail│     
  └┬──────┘     
  ┌▽─────────┐  
  │vdirsyncer│  
  └┬─────────┘  
  ┌▽───┐        
  │khal│        
  └┬───┘        
  ┌▽───────┐
  │khalorg │
  └┬───────┘
  ┌▽───────┐    
  │org mode│    
  └────────┘    
  #+end_example

* Bugs:
  - [ ] Org item not recognized by neovim plugin when no blank line is present at the bottom.
        
* Improvements:
  - [-] Khal only suppors daily, weekly, monthly, yearly from the cli, while
    org support more complex option. Find a workaround to support all org
    repeat patterns that can be created by 1 timestamp.
  - [ ] Running Khal commands directly from a script in not straightforward.
    Therefore, khal is executed as a subprocess, launching a new interpreter.
  - [ ] Only 1 timestamp per item is supported.
  - [-] Repeat patterns are currently parsed with a regex that can be replaced
    by ~dateutils.rrule~ I think. Best is to:
    - With a regex parse anything that is encapsulated within ~<...>~.
    - Split the timestamp from the RRULE.
    - Feed the RRULE to ~rrulestr~ and make the org repeater.
    - If the rrule is supported, substitute the RRULE with the org repeater.
  - [ ] Complex repeat pattern are not supported. Only patterns that can be
    expressed with the following pattern are supported ~+{number}{letter}~ 
    where ~number~ is a positive integer, and ~letter~ is: d, w, m, or y.
    Thereare workarounds for complex repeat patterns:
    - ~khal new~: you can combine multiple (recurring) meetings to creat a
      complex combination. Multiple timestamps per item are not yet supported,
      so you need to do this with multiple meetings.
    - ~khal list~: complex repeat pattern are listed as individual events, as
      is the default behavior for khal (when the ~--once~ flag is off). 
