#+TITLE:     README - khalorg
#+AUTHOR:    BartSte
#+DATE:      2023-06-05

* Introduction
  ~khalorg~ is a command line tool that converts agenda items of org mode
  into khal calendar items, and vice versa.  

  Warning: this program is still experimental, under development, and open for
  change. Before use, make sure you make a back-up of your calendar. Check the
  requirements for the features that are currently finished and under
  development. 

** Definitions
   - CalDav -> internet standard for client access to calendars [[https://en.wikipedia.org/wiki/CalDAV]]
   - Davmail -> CalDav exchange gateway [[https://davmail.sourceforge.net/e]]
   - khal -> command line calendar app [[https://github.com/pimutils/khal]]
   - khalel -> interface between emacs and khal [[https://gitlab.com/hperrey/khalel]]
   - nvim-orgmode -> org mode for neovim [[https://github.com/nvim-orgmode/orgmode]]
   - org -> plain text system for keeping notes, agendas and more. [[https://orgmode.org]]
   - vdirsyncer -> a command line tool for synchronizing calendars and 
     addressbooks between servers and the local file system. [[https://github.com/pimutils/vdirsyncer]]

** Motivation
   I use org mode to manage my agenda and my notes. However, in a professional
   setting, you are often required to use proprietary software for your agenda,
   like Office 365. Luckily, programs exist that can synchronize agendas from
   different sources, by implementing the CalDav standard. Personally, I like
   to use vdirsyncer for synchronization my agendas, and khal to access and
   manipulate the agena items. To bridge the gap between khal and org mode,
   only 1 program exists called: khalel. However, this program is designed for
   emacs. Since there are also org mode users outside of emacs (e.g. neovim),
   ~khalorg~ aims to be a general interface between khal and org mode.

   Based on the above, the following workflow is desired:
   # CalDav server -> vdirsyncer
   # vdirsyncer -> khal
   # khal -> khal-orgmode
   # khal-orgmode -> org mode
   #+begin_example ascii
   ┌─────────────┐
   │CalDav server│
   └┬────────────┘
   ┌▽─────────┐   
   │vdirsyncer│   
   └┬─────────┘   
   ┌▽───┐         
   │khal│         
   └┬───┘         
   ┌▽───────┐
   │khalorg │
   └┬───────┘
   ┌▽───────┐     
   │org mode│     
   └────────┘     
   #+end_example

** Features
   - [X] Can be used by org mode for emacs, vim and neovim.
   - [X] Vdirsyncer calendars can be manipulated by using the cli of ~khal~ as
     the interface.
   - [X] ~khalorg new~: convert an org agenda item into a ~khal~ agenda item.
   - [X] ~khalorg list~: convert a ~khal~ agenda item into an org agenda item.
   - [X] ~khalorg edit~: edit an existing ~khal~ agenda item with org mode.
   - [X] ~khalorg delete~: delete an existing ~khal~ item.
   - [X] Recurring items are supported by providing an org repeater in the
     time stamp (e.g., ~+1w~). The following is supported:
     - the follow org repeaters: ~+{integer}{d,w,m,y}~
     - ~khalorg new~ and ~khalorg edit --edit-dates~ support 1 time stamp per
       org agenda item.
     - ~khalorg list~ concatenates timestamps that cannot be describes by an
       org repeater, resulting in an org agenda item with multiple timestamps.
     - Supports an ~until~ date for recurring items. The until date can be
       supplied through an org property ~UNTIL~.
   - [X] Has unittests
   - [-] Semantic versioning
   - [-] Neovim plugin
   - [-] Include an Office 365 workflow
   - [-] Is available on PyPI

* Installation
  - For now, you need to clone this repository and run:
    #+begin_src bash
  pip install -r requirements.txt
  #+end_src
  Next, you can use the executable ~khalorg~ to import and list org agenda
  items. Make sure your ~khal~ date format is compatible with org, otherwise
  it will not work. When running ~khal printformats~ you should get:

  #+begin_src
  longdatetimeformat: 2013-12-21 Sat 21:45
  datetimeformat: 2013-12-21 Sat 21:45
  longdateformat: 2013-12-21 Sat
  dateformat: 2013-12-21 Sat
  timeformat: 21:45
  #+end_src

  Checkout section [[Usage]] for more info.

* Usage
  Use ~khalorg --help~ to get information about the cli of ~khalorg~. The
  following section discuss the ~khalorg~ commands that are available.

** List: from khal to org
   Agenda items from ~khal~ can be converted to org items using the 
   ~khalorg list~ command. For examples:
   #+begin_src bash
   khalorg list my_calendar today 90d > my_calendar.org 
   #+end_src
   Here, the ~khal~ agenda items of the calendar ~my_calendar~ are converted to
   org format and written to a file called ~my_calendar.org~. The range is
   specified from ~today~ till ~90d~ (90 days) in the future. For more
   information about the allowed date formats, check the ~khal list~ command,
   which is used for this functionality. It is assumed that the ~khal~ calendar
   called ~my_calendar~ exists. Make sure ~my_calendar~ is a calendar that
   exists on your local file system.

*** --format
    If ~khalorg list --format~ option is not defined, the default one is used
    which can be found at ~./khalorg/static/khalorg_format.txt~. If you want to
    define your own format, you have 2 options: you can use the 
    ~khalorg list --format~ option, or you can place your custom format at
    ~$HOME/.config/khalorg/khalorg_format.txt~ this format will then be used
    instead of the default one that is shown below.
    #+begin_src txt
    * {title}
      {timestamps}
      :PROPERTIES:
      :ATTENDEES: {attendees}
      :CALENDAR: {calendar}
      :CATEGORIES: {categories}
      :LOCATION: {location}
      :ORGANIZER: {organizer}
      :STATUS: {status}
      :UID: {uid}
      :URL: {url}
      :END:
      {description}
    #+end_src
    the following keys are supported:
    - ~{attendees}~: a comma separated list of email addresses of attendees
    - ~{calendar}~: the name of the khal calendar
    - ~{categories}~: the categories property of the item
    - ~{description}~: the description of the item
    - ~{location}~: the location of the item
    - ~{organizer}~: the email of the organizer
    - ~{status}~: the status of the item, e.g., TENTATIVE or ACCEPTED
    - ~{timestamps}~: the timestamp of the item
    - ~{title}~: the summary of the item
    - ~{uid}~: the UID of the item
    - ~{rrule_until}~: the until value of the RRULE.
    - ~{url}~: the url property

    the following keys are supported but are typically reserved for internal
    use and are therefore less informative:
    - ~{until}~: the until property value. Is empty when using `khalorg list`.
    - ~{rrule}~: the ICal RRULE of the item.

*** Recurring items
    The ~khalorg list~ command relies on the ~khal list~ command. Using this
    command the ~RRULE~ of each item is retrieved to created the correct org
    repeater. Only simple org repeaters are supported that have the following
    form: ~+[number][h,w,m,y]~. Complex ~RRULEs~ are described by concatenating
    the corresponding timestamps within 1 agenda item, resulting in a list of
    items. For example, the agenda item below represents a weekly recurring
    event where the first meeting was moved to another date, resulting in a
    timestamp without a repeater, and one with a repeater.

    #+begin_example
    * Meeting
      <2023-01-05 Thu 01:00-02:00>
      <2023-01-08 Sun 01:00-02:00 +1w>
      :PROPERTIES:
      :UID: 123
      :LOCATION: Somewhere
      :ORGANIZER: Someone (someone@outlook.com)
      :ATTENDEES: test@test.com, test2@test.com
      :URL: www.test.com
      :END:
      Hello,

      Lets have a meeting.

      Regards,


      Someone
    #+end_example

** New: from org to khal
   An org agenda item can be converted to a new ~khal~ agenda item by feeding
   the org item through stdin to ~khalorg new~ and specifying the khal calendar
   name as a positional argument. For example, the consider the org item below,
   which is saved as ~meeting.org~.
   #+begin_example
   * Meeting
     <2023-01-01 Sun 01:00-02:00 +1w>
     :PROPERTIES:
     :UID: 123
     :LOCATION: Somewhere
     :ORGANIZER: Someone (someone@outlook.com)
     :ATTENDEES: test@test.com, test2@test.com
     :URL: www.test.com
     :END:
     Hello,

     Lets have a meeting.

     Regards,


     Someone
   #+end_example
   This item can be converted to the ~khal~ calendar called "my_calendar" as
   follows:
   #+begin_src bash
   cat meeting.org | khalorg new my_calendar
   #+end_src
   It is assumed that the ~khal~ calendar called "my_calendar" exists. Make
   sure "my_calendar" is a calendar that exists on your local file system.

*** Recurring items
    Only 1 timestamp per org item is supported. Note that the meeting above is
    repeated every week (~+1w~). Only simple org repeaters are supported that
    have the following form: ~+[number][h,w,m,y]~. These events repeat forever,
    unless you specify an end date using the `UNTIL` property in the org file.

    Personally, when I need to create a complex repeat pattern (or when I need
    outlook specific items like a Teams invite), I create the event in outlook
    first. Next, I use ~khalorg edit~ to change the fields that need editing
    (e.g., the description). 

*** Attendees
    Optionally, attendees can be added to the ~ATTENDEES~ property field. The 
    attendees will be added to the ~Attendees~ field of ~khal~. Once you
    synchronize ~khal~ with a server (e.g., outlook) an invitation will be send
    to the attendees.

** Edit
   Existing ~khal~ events can be updates by feeding an org file with the
   corresponding UID through stdin to the ~khalorg edit~ command. For example,
   the org agenda item of [[New]] can be altered and used as an input for
   ~khalorg edit~, as long as the UID remains untouched.
   #+begin_example
   * Edited meeting
     <2023-01-01 Sun 01:00-02:00 +1w>
     :PROPERTIES:
     :UID: 123
     :ORGANIZER: Someone (someone@outlook.com)
     :ATTENDEES: other@test.com
     :END:
     Hello,

     I edited the meeting by removing the location and url. I also changed the
     title and the attendees field.

     Regards,


     Someone
   #+end_example
   Next, run the following command:
   #+begin_src bash
   cat meeting.org | khalorg edit my_calendar
   #+end_src
   When using ~khalorg edit~ please consider the following:
   - Editing an existing event is different from creating a new one as the
     original ~icalendar~ file is retained. Only parts of it are altered. This
     is convienent when the icalendar file contains information that cannot be
     generated by ~khalorg~. For example, a Microsoft Team meeting.
   - Only the PROTO event is edited, i.e., the whole series is altered not only
     the occurence.
   - ~khal edit~ will only update the dates + recurrence if the ~--edit-dates~
     flag is passed. This avoids editing the start-stop date when editing an
     event that contains multiple timestamps (which are not supported).

** Delete: 
   - An event can be deleted from a khal calendar by feeding an org file to the
     ~khalorg delete~ command through stdin. The org file must contain an
     agenda item with a non-empty UID property. For example, the khal event
     that was created using the [[New]] command above can be removed by feeding
     the same file to ~khalorg delete~:
     #+begin_src bash
     cat meeting.org | khalorg delete my_calendar
     #+end_src

*** Recurring items
    When deleting recurring items the whole series will be removed. Removing
    occurrences is not supported.
 
** Neovim plugin
   Work in progress. The plugin works for the ~khalorg new~ command but some
   settings ars still hard-coded. The plugin is called [[https://github.com/BartSte/nvim-khalorg][nvim-khalorg]].

* Workflow for Office 365
  # Office 365 -> Davmail
  # Davmail -> vdirsyncer
  # vdirsyncer -> khal
  # khal -> khal-orgmode
  # khal-orgmode -> org mode
  #+begin_example
  ┌──────────┐  
  │Office 365│  
  └┬─────────┘  
  ┌▽──────┐     
  │Davmail│     
  └┬──────┘     
  ┌▽─────────┐  
  │vdirsyncer│  
  └┬─────────┘  
  ┌▽───┐        
  │khal│        
  └┬───┘        
  ┌▽───────┐
  │khalorg │
  └┬───────┘
  ┌▽───────┐    
  │org mode│    
  └────────┘    
  #+end_example

* Bugs:
  - [ ] Org item not recognized by neovim plugin when no blank line is present
    at the bottom.

* Improvements:
  - [ ] Timezones are not yet supported, so ~khalorg~ will only work when you
    agenda remain in the timezone that you specified within your ~khal~ config.
  - [ ] Running khal commands directly from a script in not straightforward.
    Therefore, khal is executed as a subprocess, by using its command line
    interface.
  - [ ] ~khalorg new~ and ~khal edit~ only support 1 timestamp per item.
    However, it is desired that all timestamps within 1 org agenda item, end up
    in 1 khal event, as is the case for the ~orgagenda~. To achieve this the
    following could be build:
    - [ ] When multiple timestamps without an org repeater are provided, find
      the ~RRULE~ that describes them. Also, set the ~UNTIL~ date to the last
      date. If no ~RRULE~ can be found, raise an error. Another option could be
      to use the ~RDATE~ option of ICal.
    - [ ] When multiple timestamps with an org repeater are presented, try to
      find the ~RRULE~ that describes them.
